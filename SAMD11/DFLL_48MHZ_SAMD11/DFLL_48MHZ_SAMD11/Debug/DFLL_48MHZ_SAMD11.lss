
DFLL_48MHZ_SAMD11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000104d0  2**0
                  CONTENTS
  2 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00000400  20000020  20000020  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000080f1  00000000  00000000  00010551  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001465  00000000  00000000  00018642  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000c06  00000000  00000000  00019aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000220  00000000  00000000  0001a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001e8  00000000  00000000  0001a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012492  00000000  00000000  0001aab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000066e4  00000000  00000000  0002cf47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068029  00000000  00000000  0003362b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000380  00000000  00000000  0009b654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 04 00 20 fd 00 00 00 f9 00 00 00 f9 00 00 00      .. ............
	...
  2c:	f9 00 00 00 00 00 00 00 00 00 00 00 f9 00 00 00     ................
  3c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
  4c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
  5c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
  6c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................
  7c:	f9 00 00 00 f9 00 00 00 f9 00 00 00 f9 00 00 00     ................

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000000 	.word	0x20000000
  ac:	00000000 	.word	0x00000000
  b0:	000004d0 	.word	0x000004d0

000000b4 <frame_dummy>:
  b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b6:	b510      	push	{r4, lr}
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd10      	pop	{r4, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	20000004 	.word	0x20000004
  e0:	000004d0 	.word	0x000004d0
  e4:	000004d0 	.word	0x000004d0
  e8:	00000000 	.word	0x00000000

000000ec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  ec:	b510      	push	{r4, lr}
	system_init();
  ee:	4b01      	ldr	r3, [pc, #4]	; (f4 <atmel_start_init+0x8>)
  f0:	4798      	blx	r3
}
  f2:	bd10      	pop	{r4, pc}
  f4:	000001f5 	.word	0x000001f5

000000f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  f8:	e7fe      	b.n	f8 <Dummy_Handler>
	...

000000fc <Reset_Handler>:
{
  fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
  fe:	4a2a      	ldr	r2, [pc, #168]	; (1a8 <Reset_Handler+0xac>)
 100:	4b2a      	ldr	r3, [pc, #168]	; (1ac <Reset_Handler+0xb0>)
 102:	429a      	cmp	r2, r3
 104:	d011      	beq.n	12a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 106:	001a      	movs	r2, r3
 108:	4b29      	ldr	r3, [pc, #164]	; (1b0 <Reset_Handler+0xb4>)
 10a:	429a      	cmp	r2, r3
 10c:	d20d      	bcs.n	12a <Reset_Handler+0x2e>
 10e:	4a29      	ldr	r2, [pc, #164]	; (1b4 <Reset_Handler+0xb8>)
 110:	3303      	adds	r3, #3
 112:	1a9b      	subs	r3, r3, r2
 114:	089b      	lsrs	r3, r3, #2
 116:	3301      	adds	r3, #1
 118:	009b      	lsls	r3, r3, #2
 11a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 11c:	4823      	ldr	r0, [pc, #140]	; (1ac <Reset_Handler+0xb0>)
 11e:	4922      	ldr	r1, [pc, #136]	; (1a8 <Reset_Handler+0xac>)
 120:	588c      	ldr	r4, [r1, r2]
 122:	5084      	str	r4, [r0, r2]
 124:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 126:	429a      	cmp	r2, r3
 128:	d1fa      	bne.n	120 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4a23      	ldr	r2, [pc, #140]	; (1b8 <Reset_Handler+0xbc>)
 12c:	4b23      	ldr	r3, [pc, #140]	; (1bc <Reset_Handler+0xc0>)
 12e:	429a      	cmp	r2, r3
 130:	d20a      	bcs.n	148 <Reset_Handler+0x4c>
 132:	43d3      	mvns	r3, r2
 134:	4921      	ldr	r1, [pc, #132]	; (1bc <Reset_Handler+0xc0>)
 136:	185b      	adds	r3, r3, r1
 138:	2103      	movs	r1, #3
 13a:	438b      	bics	r3, r1
 13c:	3304      	adds	r3, #4
 13e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 140:	2100      	movs	r1, #0
 142:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 144:	4293      	cmp	r3, r2
 146:	d1fc      	bne.n	142 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 148:	4a1d      	ldr	r2, [pc, #116]	; (1c0 <Reset_Handler+0xc4>)
 14a:	21ff      	movs	r1, #255	; 0xff
 14c:	4b1d      	ldr	r3, [pc, #116]	; (1c4 <Reset_Handler+0xc8>)
 14e:	438b      	bics	r3, r1
 150:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 152:	39fd      	subs	r1, #253	; 0xfd
 154:	2390      	movs	r3, #144	; 0x90
 156:	005b      	lsls	r3, r3, #1
 158:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xcc>)
 15a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15c:	4a1b      	ldr	r2, [pc, #108]	; (1cc <Reset_Handler+0xd0>)
 15e:	78d3      	ldrb	r3, [r2, #3]
 160:	2503      	movs	r5, #3
 162:	43ab      	bics	r3, r5
 164:	2402      	movs	r4, #2
 166:	4323      	orrs	r3, r4
 168:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 16a:	78d3      	ldrb	r3, [r2, #3]
 16c:	270c      	movs	r7, #12
 16e:	43bb      	bics	r3, r7
 170:	2608      	movs	r6, #8
 172:	4333      	orrs	r3, r6
 174:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 176:	4b16      	ldr	r3, [pc, #88]	; (1d0 <Reset_Handler+0xd4>)
 178:	7b98      	ldrb	r0, [r3, #14]
 17a:	2230      	movs	r2, #48	; 0x30
 17c:	4390      	bics	r0, r2
 17e:	2220      	movs	r2, #32
 180:	4310      	orrs	r0, r2
 182:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 184:	7b99      	ldrb	r1, [r3, #14]
 186:	43b9      	bics	r1, r7
 188:	4331      	orrs	r1, r6
 18a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18c:	7b9a      	ldrb	r2, [r3, #14]
 18e:	43aa      	bics	r2, r5
 190:	4322      	orrs	r2, r4
 192:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 194:	4a0f      	ldr	r2, [pc, #60]	; (1d4 <Reset_Handler+0xd8>)
 196:	6853      	ldr	r3, [r2, #4]
 198:	2180      	movs	r1, #128	; 0x80
 19a:	430b      	orrs	r3, r1
 19c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19e:	4b0e      	ldr	r3, [pc, #56]	; (1d8 <Reset_Handler+0xdc>)
 1a0:	4798      	blx	r3
        main();
 1a2:	4b0e      	ldr	r3, [pc, #56]	; (1dc <Reset_Handler+0xe0>)
 1a4:	4798      	blx	r3
 1a6:	e7fe      	b.n	1a6 <Reset_Handler+0xaa>
 1a8:	000004d0 	.word	0x000004d0
 1ac:	20000000 	.word	0x20000000
 1b0:	20000000 	.word	0x20000000
 1b4:	20000004 	.word	0x20000004
 1b8:	20000000 	.word	0x20000000
 1bc:	20000020 	.word	0x20000020
 1c0:	e000ed00 	.word	0xe000ed00
 1c4:	00000000 	.word	0x00000000
 1c8:	41007000 	.word	0x41007000
 1cc:	41005000 	.word	0x41005000
 1d0:	41004800 	.word	0x41004800
 1d4:	41004000 	.word	0x41004000
 1d8:	00000469 	.word	0x00000469
 1dc:	00000449 	.word	0x00000449

000001e0 <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
 1e0:	b510      	push	{r4, lr}
	delay_init(SysTick);
 1e2:	4802      	ldr	r0, [pc, #8]	; (1ec <delay_driver_init+0xc>)
 1e4:	4b02      	ldr	r3, [pc, #8]	; (1f0 <delay_driver_init+0x10>)
 1e6:	4798      	blx	r3
}
 1e8:	bd10      	pop	{r4, pc}
 1ea:	46c0      	nop			; (mov r8, r8)
 1ec:	e000e010 	.word	0xe000e010
 1f0:	00000235 	.word	0x00000235

000001f4 <system_init>:

void system_init(void)
{
 1f4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 1f6:	4b0b      	ldr	r3, [pc, #44]	; (224 <system_init+0x30>)
 1f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 1fa:	23c0      	movs	r3, #192	; 0xc0
 1fc:	05db      	lsls	r3, r3, #23
 1fe:	2280      	movs	r2, #128	; 0x80
 200:	0252      	lsls	r2, r2, #9
 202:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 204:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 206:	4b08      	ldr	r3, [pc, #32]	; (228 <system_init+0x34>)
 208:	2280      	movs	r2, #128	; 0x80
 20a:	05d2      	lsls	r2, r2, #23
 20c:	629a      	str	r2, [r3, #40]	; 0x28
 20e:	4a07      	ldr	r2, [pc, #28]	; (22c <system_init+0x38>)
 210:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 212:	2150      	movs	r1, #80	; 0x50
 214:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 216:	2001      	movs	r0, #1
 218:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 21a:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
 21c:	4b04      	ldr	r3, [pc, #16]	; (230 <system_init+0x3c>)
 21e:	4798      	blx	r3
}
 220:	bd10      	pop	{r4, pc}
 222:	46c0      	nop			; (mov r8, r8)
 224:	00000275 	.word	0x00000275
 228:	41004400 	.word	0x41004400
 22c:	c0000001 	.word	0xc0000001
 230:	000001e1 	.word	0x000001e1

00000234 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 234:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 236:	4b02      	ldr	r3, [pc, #8]	; (240 <delay_init+0xc>)
 238:	6018      	str	r0, [r3, #0]
 23a:	4b02      	ldr	r3, [pc, #8]	; (244 <delay_init+0x10>)
 23c:	4798      	blx	r3
}
 23e:	bd10      	pop	{r4, pc}
 240:	2000001c 	.word	0x2000001c
 244:	000003e1 	.word	0x000003e1

00000248 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 248:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 24a:	4b04      	ldr	r3, [pc, #16]	; (25c <delay_ms+0x14>)
 24c:	681c      	ldr	r4, [r3, #0]
 24e:	4b04      	ldr	r3, [pc, #16]	; (260 <delay_ms+0x18>)
 250:	4798      	blx	r3
 252:	0001      	movs	r1, r0
 254:	0020      	movs	r0, r4
 256:	4b03      	ldr	r3, [pc, #12]	; (264 <delay_ms+0x1c>)
 258:	4798      	blx	r3
}
 25a:	bd10      	pop	{r4, pc}
 25c:	2000001c 	.word	0x2000001c
 260:	00000269 	.word	0x00000269
 264:	000003f5 	.word	0x000003f5

00000268 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
 268:	4b01      	ldr	r3, [pc, #4]	; (270 <_get_cycles_for_ms+0x8>)
 26a:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 26c:	4770      	bx	lr
 26e:	46c0      	nop			; (mov r8, r8)
 270:	0000bb80 	.word	0x0000bb80

00000274 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 274:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 276:	4a08      	ldr	r2, [pc, #32]	; (298 <_init_chip+0x24>)
 278:	6853      	ldr	r3, [r2, #4]
 27a:	2102      	movs	r1, #2
 27c:	430b      	orrs	r3, r1
 27e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 280:	4b06      	ldr	r3, [pc, #24]	; (29c <_init_chip+0x28>)
 282:	4798      	blx	r3
	_sysctrl_init_sources();
 284:	4b06      	ldr	r3, [pc, #24]	; (2a0 <_init_chip+0x2c>)
 286:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
 288:	2008      	movs	r0, #8
 28a:	4c06      	ldr	r4, [pc, #24]	; (2a4 <_init_chip+0x30>)
 28c:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
 28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <_init_chip+0x34>)
 290:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 292:	2037      	movs	r0, #55	; 0x37
 294:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
 296:	bd10      	pop	{r4, pc}
 298:	41004000 	.word	0x41004000
 29c:	000002ed 	.word	0x000002ed
 2a0:	0000030d 	.word	0x0000030d
 2a4:	000002ad 	.word	0x000002ad
 2a8:	00000365 	.word	0x00000365

000002ac <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 2ac:	07c3      	lsls	r3, r0, #31
 2ae:	d509      	bpl.n	2c4 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
 2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <_gclk_init_generators_by_fref+0x34>)
 2b2:	2280      	movs	r2, #128	; 0x80
 2b4:	0052      	lsls	r2, r2, #1
 2b6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 2b8:	4a0a      	ldr	r2, [pc, #40]	; (2e4 <_gclk_init_generators_by_fref+0x38>)
 2ba:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 2bc:	001a      	movs	r2, r3
 2be:	7853      	ldrb	r3, [r2, #1]
 2c0:	09db      	lsrs	r3, r3, #7
 2c2:	d1fc      	bne.n	2be <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
 2c4:	0703      	lsls	r3, r0, #28
 2c6:	d509      	bpl.n	2dc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
 2c8:	4b05      	ldr	r3, [pc, #20]	; (2e0 <_gclk_init_generators_by_fref+0x34>)
 2ca:	2204      	movs	r2, #4
 2cc:	32ff      	adds	r2, #255	; 0xff
 2ce:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 2d0:	4a05      	ldr	r2, [pc, #20]	; (2e8 <_gclk_init_generators_by_fref+0x3c>)
 2d2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 2d4:	001a      	movs	r2, r3
 2d6:	7853      	ldrb	r3, [r2, #1]
 2d8:	09db      	lsrs	r3, r3, #7
 2da:	d1fc      	bne.n	2d6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_5_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_5_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_5_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_5_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif
}
 2dc:	4770      	bx	lr
 2de:	46c0      	nop			; (mov r8, r8)
 2e0:	40000c00 	.word	0x40000c00
 2e4:	00010700 	.word	0x00010700
 2e8:	00010403 	.word	0x00010403

000002ec <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <_pm_init+0x1c>)
 2ee:	7a1a      	ldrb	r2, [r3, #8]
 2f0:	b2d2      	uxtb	r2, r2
 2f2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 2f4:	7a5a      	ldrb	r2, [r3, #9]
 2f6:	b2d2      	uxtb	r2, r2
 2f8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 2fa:	7a9a      	ldrb	r2, [r3, #10]
 2fc:	b2d2      	uxtb	r2, r2
 2fe:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 300:	7ada      	ldrb	r2, [r3, #11]
 302:	b2d2      	uxtb	r2, r2
 304:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 306:	4770      	bx	lr
 308:	40000400 	.word	0x40000400

0000030c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 30c:	4b12      	ldr	r3, [pc, #72]	; (358 <_sysctrl_init_sources+0x4c>)
 30e:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 310:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
 312:	4812      	ldr	r0, [pc, #72]	; (35c <_sysctrl_init_sources+0x50>)
 314:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
 316:	0f89      	lsrs	r1, r1, #30
 318:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
 31a:	4811      	ldr	r0, [pc, #68]	; (360 <_sysctrl_init_sources+0x54>)
 31c:	4301      	orrs	r1, r0
 31e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
 320:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
 322:	699a      	ldr	r2, [r3, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
 324:	21fe      	movs	r1, #254	; 0xfe
 326:	03c9      	lsls	r1, r1, #15
 328:	400a      	ands	r2, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
 32a:	2106      	movs	r1, #6
 32c:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
 32e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
 330:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
 332:	3119      	adds	r1, #25
 334:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 336:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
 338:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
 33a:	2204      	movs	r2, #4
 33c:	68cb      	ldr	r3, [r1, #12]
 33e:	421a      	tst	r2, r3
 340:	d0fc      	beq.n	33c <_sysctrl_init_sources+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
 342:	4905      	ldr	r1, [pc, #20]	; (358 <_sysctrl_init_sources+0x4c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
 344:	2208      	movs	r2, #8
 346:	68cb      	ldr	r3, [r1, #12]
 348:	421a      	tst	r2, r3
 34a:	d0fc      	beq.n	346 <_sysctrl_init_sources+0x3a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
 34c:	4a02      	ldr	r2, [pc, #8]	; (358 <_sysctrl_init_sources+0x4c>)
 34e:	6a13      	ldr	r3, [r2, #32]
 350:	2180      	movs	r1, #128	; 0x80
 352:	430b      	orrs	r3, r1
 354:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 356:	4770      	bx	lr
 358:	40000800 	.word	0x40000800
 35c:	0fff0000 	.word	0x0fff0000
 360:	00000302 	.word	0x00000302

00000364 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
 364:	2286      	movs	r2, #134	; 0x86
 366:	01d2      	lsls	r2, r2, #7
 368:	4b18      	ldr	r3, [pc, #96]	; (3cc <_sysctrl_init_referenced_generators+0x68>)
 36a:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 36c:	2202      	movs	r2, #2
 36e:	4b18      	ldr	r3, [pc, #96]	; (3d0 <_sysctrl_init_referenced_generators+0x6c>)
 370:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 372:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 374:	320e      	adds	r2, #14
 376:	68cb      	ldr	r3, [r1, #12]
 378:	421a      	tst	r2, r3
 37a:	d0fc      	beq.n	376 <_sysctrl_init_referenced_generators+0x12>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
 37c:	4a15      	ldr	r2, [pc, #84]	; (3d4 <_sysctrl_init_referenced_generators+0x70>)
 37e:	4b14      	ldr	r3, [pc, #80]	; (3d0 <_sysctrl_init_referenced_generators+0x6c>)
 380:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 382:	4b15      	ldr	r3, [pc, #84]	; (3d8 <_sysctrl_init_referenced_generators+0x74>)
 384:	681b      	ldr	r3, [r3, #0]
 386:	0e9b      	lsrs	r3, r3, #26
 388:	2b3f      	cmp	r3, #63	; 0x3f
 38a:	d015      	beq.n	3b8 <_sysctrl_init_referenced_generators+0x54>
 38c:	029b      	lsls	r3, r3, #10
 38e:	2280      	movs	r2, #128	; 0x80
 390:	0092      	lsls	r2, r2, #2
 392:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
 394:	4a0e      	ldr	r2, [pc, #56]	; (3d0 <_sysctrl_init_referenced_generators+0x6c>)
 396:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 398:	4b10      	ldr	r3, [pc, #64]	; (3dc <_sysctrl_init_referenced_generators+0x78>)
 39a:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
 39c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
 39e:	075b      	lsls	r3, r3, #29
 3a0:	d50d      	bpl.n	3be <_sysctrl_init_referenced_generators+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
 3a2:	0011      	movs	r1, r2
	tmp &= mask;
 3a4:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
 3a6:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
 3a8:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
 3aa:	2bd0      	cmp	r3, #208	; 0xd0
 3ac:	d1fb      	bne.n	3a6 <_sysctrl_init_referenced_generators+0x42>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
 3ae:	4a07      	ldr	r2, [pc, #28]	; (3cc <_sysctrl_init_referenced_generators+0x68>)
 3b0:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
 3b2:	09db      	lsrs	r3, r3, #7
 3b4:	d1fc      	bne.n	3b0 <_sysctrl_init_referenced_generators+0x4c>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 3b6:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 3b8:	23fc      	movs	r3, #252	; 0xfc
 3ba:	01db      	lsls	r3, r3, #7
 3bc:	e7ea      	b.n	394 <_sysctrl_init_referenced_generators+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 3be:	4904      	ldr	r1, [pc, #16]	; (3d0 <_sysctrl_init_referenced_generators+0x6c>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 3c0:	2210      	movs	r2, #16
 3c2:	68cb      	ldr	r3, [r1, #12]
 3c4:	421a      	tst	r2, r3
 3c6:	d0fc      	beq.n	3c2 <_sysctrl_init_referenced_generators+0x5e>
 3c8:	e7f1      	b.n	3ae <_sysctrl_init_referenced_generators+0x4a>
 3ca:	46c0      	nop			; (mov r8, r8)
 3cc:	40000c00 	.word	0x40000c00
 3d0:	40000800 	.word	0x40000800
 3d4:	040105b9 	.word	0x040105b9
 3d8:	00806024 	.word	0x00806024
 3dc:	00000806 	.word	0x00000806

000003e0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 3e0:	4b02      	ldr	r3, [pc, #8]	; (3ec <_delay_init+0xc>)
 3e2:	4a03      	ldr	r2, [pc, #12]	; (3f0 <_delay_init+0x10>)
 3e4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 3e6:	2205      	movs	r2, #5
 3e8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 3ea:	4770      	bx	lr
 3ec:	e000e010 	.word	0xe000e010
 3f0:	00ffffff 	.word	0x00ffffff

000003f4 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
 3f4:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
 3f6:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 3f8:	1e5e      	subs	r6, r3, #1
 3fa:	b2f6      	uxtb	r6, r6
 3fc:	2b00      	cmp	r3, #0
 3fe:	d013      	beq.n	428 <STACK_SIZE+0x28>
 400:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
 402:	4a0e      	ldr	r2, [pc, #56]	; (43c <STACK_SIZE+0x3c>)
 404:	4d0e      	ldr	r5, [pc, #56]	; (440 <STACK_SIZE+0x40>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 406:	2080      	movs	r0, #128	; 0x80
 408:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
 40a:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
 40c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 40e:	6813      	ldr	r3, [r2, #0]
 410:	4203      	tst	r3, r0
 412:	d0fc      	beq.n	40e <STACK_SIZE+0xe>
	while (n--) {
 414:	3c01      	subs	r4, #1
 416:	b2e4      	uxtb	r4, r4
 418:	2cff      	cmp	r4, #255	; 0xff
 41a:	d1f6      	bne.n	40a <STACK_SIZE+0xa>
 41c:	0633      	lsls	r3, r6, #24
 41e:	1af6      	subs	r6, r6, r3
 420:	4b08      	ldr	r3, [pc, #32]	; (444 <STACK_SIZE+0x44>)
 422:	469c      	mov	ip, r3
 424:	4461      	add	r1, ip
 426:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
 428:	4b04      	ldr	r3, [pc, #16]	; (43c <STACK_SIZE+0x3c>)
 42a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 42c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 42e:	0019      	movs	r1, r3
 430:	2280      	movs	r2, #128	; 0x80
 432:	0252      	lsls	r2, r2, #9
 434:	680b      	ldr	r3, [r1, #0]
 436:	4213      	tst	r3, r2
 438:	d0fc      	beq.n	434 <STACK_SIZE+0x34>
		;
}
 43a:	bd70      	pop	{r4, r5, r6, pc}
 43c:	e000e010 	.word	0xe000e010
 440:	00ffffff 	.word	0x00ffffff
 444:	ff000001 	.word	0xff000001

00000448 <main>:
#include <atmel_start.h>

int main(void)
{
 448:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 44a:	4b05      	ldr	r3, [pc, #20]	; (460 <main+0x18>)
 44c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 44e:	26c0      	movs	r6, #192	; 0xc0
 450:	05f6      	lsls	r6, r6, #23
 452:	2580      	movs	r5, #128	; 0x80
 454:	026d      	lsls	r5, r5, #9

	/* Replace with your application code */
	while (1) 
	{
		gpio_toggle_pin_level(LED0);
		delay_ms(250);
 456:	4c03      	ldr	r4, [pc, #12]	; (464 <main+0x1c>)
 458:	61f5      	str	r5, [r6, #28]
 45a:	20fa      	movs	r0, #250	; 0xfa
 45c:	47a0      	blx	r4
 45e:	e7fb      	b.n	458 <main+0x10>
 460:	000000ed 	.word	0x000000ed
 464:	00000249 	.word	0x00000249

00000468 <__libc_init_array>:
 468:	b570      	push	{r4, r5, r6, lr}
 46a:	2600      	movs	r6, #0
 46c:	4d0c      	ldr	r5, [pc, #48]	; (4a0 <__libc_init_array+0x38>)
 46e:	4c0d      	ldr	r4, [pc, #52]	; (4a4 <__libc_init_array+0x3c>)
 470:	1b64      	subs	r4, r4, r5
 472:	10a4      	asrs	r4, r4, #2
 474:	42a6      	cmp	r6, r4
 476:	d109      	bne.n	48c <__libc_init_array+0x24>
 478:	2600      	movs	r6, #0
 47a:	f000 f819 	bl	4b0 <_init>
 47e:	4d0a      	ldr	r5, [pc, #40]	; (4a8 <__libc_init_array+0x40>)
 480:	4c0a      	ldr	r4, [pc, #40]	; (4ac <__libc_init_array+0x44>)
 482:	1b64      	subs	r4, r4, r5
 484:	10a4      	asrs	r4, r4, #2
 486:	42a6      	cmp	r6, r4
 488:	d105      	bne.n	496 <__libc_init_array+0x2e>
 48a:	bd70      	pop	{r4, r5, r6, pc}
 48c:	00b3      	lsls	r3, r6, #2
 48e:	58eb      	ldr	r3, [r5, r3]
 490:	4798      	blx	r3
 492:	3601      	adds	r6, #1
 494:	e7ee      	b.n	474 <__libc_init_array+0xc>
 496:	00b3      	lsls	r3, r6, #2
 498:	58eb      	ldr	r3, [r5, r3]
 49a:	4798      	blx	r3
 49c:	3601      	adds	r6, #1
 49e:	e7f2      	b.n	486 <__libc_init_array+0x1e>
 4a0:	000004bc 	.word	0x000004bc
 4a4:	000004bc 	.word	0x000004bc
 4a8:	000004bc 	.word	0x000004bc
 4ac:	000004c0 	.word	0x000004c0

000004b0 <_init>:
 4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4b2:	46c0      	nop			; (mov r8, r8)
 4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4b6:	bc08      	pop	{r3}
 4b8:	469e      	mov	lr, r3
 4ba:	4770      	bx	lr

000004bc <__init_array_start>:
 4bc:	000000b5 	.word	0x000000b5

000004c0 <_fini>:
 4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4c2:	46c0      	nop			; (mov r8, r8)
 4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4c6:	bc08      	pop	{r3}
 4c8:	469e      	mov	lr, r3
 4ca:	4770      	bx	lr

000004cc <__fini_array_start>:
 4cc:	0000008d 	.word	0x0000008d
